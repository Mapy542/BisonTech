{"mode":"Text","textContent":"vexcode_brain_precision = 0\nvexcode_console_precision = 0\nvexcode_controller_1_precision = 0\nmyVariable = 0\naccelCheck = 0\nkill = 0\ndesired_heading = 0\nprevheading = 0\nautomove = 0\nInputs = [0 for x in range(8)]\nvelocity = [0 for x in range(20)]\nCords = [0 for x in range(2)]\navgacceleration = [0 for x in range(3)]\nmessage1 = Event()\nGetContAcceleration = Event()\n\ndef my_1var_Telemetry_number(my_1var_Telemetry_number__number):\n    global myVariable, accelCheck, kill, desired_heading, prevheading, automove, Inputs, velocity, Cords, avgacceleration, message1, GetContAcceleration, vexcode_brain_precision, vexcode_console_precision, vexcode_controller_1_precision\n    brain.screen.clear_screen()\n    brain.screen.set_font(FontType.MONO20)\n    brain.screen.set_cursor(1, 1)\n    brain.screen.print(my_1var_Telemetry_number__number, precision=6 if vexcode_brain_precision is None else vexcode_brain_precision)\n\ndef Get_Input_Values():\n    global myVariable, accelCheck, kill, desired_heading, prevheading, automove, Inputs, velocity, Cords, avgacceleration, message1, GetContAcceleration, vexcode_brain_precision, vexcode_console_precision, vexcode_controller_1_precision\n    if not (controller_1.axis3.position() > 0 or controller_1.axis3.position() < 0):\n        Inputs[1 - 1] = 0\n    else:\n        if math.fabs(controller_1.axis3.position()) < 33:\n            Inputs[1 - 1] = controller_1.axis3.position() * -0.25\n        else:\n            Inputs[1 - 1] = controller_1.axis3.position() * -1\n    if not (controller_1.axis4.position() > 0 or controller_1.axis4.position() < 0):\n        Inputs[2 - 1] = 0\n    else:\n        if math.fabs(controller_1.axis4.position()) < 33:\n            Inputs[2 - 1] = controller_1.axis4.position() * 0.25\n        else:\n            Inputs[2 - 1] = controller_1.axis4.position()\n    if controller_1.buttonA.pressing():\n        Inputs[5 - 1] = 1\n    else:\n        Inputs[5 - 1] = 0\n    if controller_1.buttonR1.pressing():\n        Inputs[3 - 1] = 99\n    else:\n        if controller_1.buttonR2.pressing():\n            Inputs[3 - 1] = -99\n        else:\n            Inputs[3 - 1] = 0\n    if controller_1.buttonL1.pressing():\n        Inputs[4 - 1] = 40\n    else:\n        if controller_1.buttonL2.pressing():\n            Inputs[4 - 1] = -40\n        else:\n            Inputs[4 - 1] = 0\n    if controller_1.buttonUp.pressing():\n        Inputs[6 - 1] = 100\n        automove = 0\n    else:\n        if controller_1.buttonDown.pressing():\n            Inputs[6 - 1] = -100\n            automove = 0\n        else:\n            Inputs[6 - 1] = 0\n    if controller_1.buttonLeft.pressing():\n        Inputs[7 - 1] = 10\n        automove = 1\n    else:\n        if controller_1.buttonRight.pressing():\n            Inputs[7 - 1] = 500\n            automove = 1\n        else:\n            pass\n\ndef Update_Motors_to_Inputs():\n    global myVariable, accelCheck, kill, desired_heading, prevheading, automove, Inputs, velocity, Cords, avgacceleration, message1, GetContAcceleration, vexcode_brain_precision, vexcode_console_precision, vexcode_controller_1_precision\n    if Inputs[5 - 1] == 0:\n        if Inputs[1 - 1] == 0 and Inputs[2 - 1] == 0:\n            LB.stop()\n            RB.stop()\n            LR.stop()\n            LF.stop()\n        else:\n            LB.set_velocity((Inputs[1 - 1] / 2 + Inputs[2 - 1] / 4), PERCENT)\n            LB.spin(FORWARD)\n            RB.set_velocity((Inputs[1 - 1] / 2 - Inputs[2 - 1] / 4), PERCENT)\n            RB.spin(FORWARD)\n            LF.set_velocity((Inputs[1 - 1] / 2 + Inputs[2 - 1] / 4), PERCENT)\n            LF.spin(FORWARD)\n            LR.set_velocity((Inputs[1 - 1] / 2 - Inputs[2 - 1] / 4), PERCENT)\n            LR.spin(FORWARD)\n    else:\n        if Inputs[1 - 1] == 0 and Inputs[2 - 1] == 0:\n            LB.stop()\n            RB.stop()\n            LR.stop()\n            LF.stop()\n        else:\n            LB.set_velocity((Inputs[1 - 1] + Inputs[2 - 1]), PERCENT)\n            LB.spin(FORWARD)\n            RB.set_velocity((Inputs[1 - 1] - Inputs[2 - 1]), PERCENT)\n            RB.spin(FORWARD)\n            LF.set_velocity((Inputs[1 - 1] + Inputs[2 - 1]), PERCENT)\n            LF.spin(FORWARD)\n            LR.set_velocity((Inputs[1 - 1] - Inputs[2 - 1]), PERCENT)\n            LR.spin(FORWARD)\ndef Set_x_y_heading(Set_x_y_heading__x, Set_x_y_heading__y, Set_x_y_heading__heading):\n    global myVariable, accelCheck, kill, desired_heading, prevheading, automove, Inputs, velocity, Cords, avgacceleration, message1, GetContAcceleration, vexcode_brain_precision, vexcode_console_precision, vexcode_controller_1_precision\n    Gryo.set_heading(Set_x_y_heading__heading, DEGREES)\n\ndef INIT():\n    global myVariable, accelCheck, kill, desired_heading, prevheading, automove, Inputs, velocity, Cords, avgacceleration, message1, GetContAcceleration, vexcode_brain_precision, vexcode_console_precision, vexcode_controller_1_precision\n    prevheading = 0\n    myVariable = 0\n    kill = 0\n    Gryo.calibrate()\n    while Gryo.is_calibrating():\n      sleep(50)\n    Gryo.set_heading(180, DEGREES)\n    Gryo.set_rotation(0, DEGREES)\n    LB.stop()\n    RB.stop()\n    LF.stop()\n    LR.stop()\n    LB.set_stopping(BRAKE)\n    RB.set_stopping(BRAKE)\n    LF.set_stopping(BRAKE)\n    LR.set_stopping(BRAKE)\n    LB.set_velocity(100, PERCENT)\n    RB.set_velocity(100, PERCENT)\n    LF.set_velocity(100, PERCENT)\n    LR.set_velocity(100, PERCENT)\n    LB.set_max_torque(100, PERCENT)\n    RB.set_max_torque(100, PERCENT)\n    LF.set_max_torque(100, PERCENT)\n    LR.set_max_torque(100, PERCENT)\n\ndef Drive_Reverse_deg_degrees_sped__25power(Drive_Reverse_deg_degrees_sped__25power__deg, Drive_Reverse_deg_degrees_sped__25power__sped):\n    global myVariable, accelCheck, kill, desired_heading, prevheading, automove, Inputs, velocity, Cords, avgacceleration, message1, GetContAcceleration, vexcode_brain_precision, vexcode_console_precision, vexcode_controller_1_precision\n    LB.set_position(0, DEGREES)\n    RB.set_position(0, DEGREES)\n    LF.set_position(0, DEGREES)\n    LR.set_position(0, DEGREES)\n    LB.set_velocity(Drive_Reverse_deg_degrees_sped__25power__sped, PERCENT)\n    RB.set_velocity(Drive_Reverse_deg_degrees_sped__25power__sped, PERCENT)\n    LF.set_velocity(Drive_Reverse_deg_degrees_sped__25power__sped, PERCENT)\n    LR.set_velocity(Drive_Reverse_deg_degrees_sped__25power__sped, PERCENT)\n    LB.spin(REVERSE)\n    RB.spin(REVERSE)\n    LF.spin(REVERSE)\n    LR.spin(REVERSE)\n    while not Drive_Reverse_deg_degrees_sped__25power__deg > LB.position(DEGREES):\n        my_1var_Telemetry_number(LB.position(DEGREES))\n        wait(5, MSEC)\n    LB.stop()\n    RB.stop()\n    LF.stop()\n    LR.stop()\n\ndef Turn_Nonabsolute_turn_angle_speed(Turn_Nonabsolute_turn_angle_speed__turn_angle, Turn_Nonabsolute_turn_angle_speed__speed):\n    global myVariable, accelCheck, kill, desired_heading, prevheading, automove, Inputs, velocity, Cords, avgacceleration, message1, GetContAcceleration, vexcode_brain_precision, vexcode_console_precision, vexcode_controller_1_precision\n    wait(0.5, SECONDS)\n    prevheading = str(prevheading - Gryo.heading(DEGREES))\n    Set_x_y_heading(1, 1, 180)\n    my_1var_Telemetry_number(prevheading)\n    wait(5, SECONDS)\n    my_1var_Telemetry_number(Gryo.heading(DEGREES))\n    wait(5, SECONDS)\n    LB.set_velocity(Turn_Nonabsolute_turn_angle_speed__speed, PERCENT)\n    RB.set_velocity(Turn_Nonabsolute_turn_angle_speed__speed, PERCENT)\n    LF.set_velocity(Turn_Nonabsolute_turn_angle_speed__speed, PERCENT)\n    LR.set_velocity(Turn_Nonabsolute_turn_angle_speed__speed, PERCENT)\n    desired_heading = (Turn_Nonabsolute_turn_angle_speed__turn_angle + prevheading) + 180\n    my_1var_Telemetry_number(Turn_Nonabsolute_turn_angle_speed__turn_angle)\n    wait(5, SECONDS)\n    my_1var_Telemetry_number(desired_heading)\n    wait(5, SECONDS)\n    if Turn_Nonabsolute_turn_angle_speed__turn_angle + prevheading > 0:\n        while Gryo.heading(DEGREES) < desired_heading - 3:\n            if Gryo.heading(DEGREES) > desired_heading - 45:\n                LB.set_velocity((Turn_Nonabsolute_turn_angle_speed__speed / 2), PERCENT)\n                RB.set_velocity((Turn_Nonabsolute_turn_angle_speed__speed / 2), PERCENT)\n                LF.set_velocity((Turn_Nonabsolute_turn_angle_speed__speed / 2), PERCENT)\n                LR.set_velocity((Turn_Nonabsolute_turn_angle_speed__speed / 2), PERCENT)\n            RB.spin(REVERSE)\n            LR.spin(REVERSE)\n            LB.spin(FORWARD)\n            LF.spin(FORWARD)\n            wait(5, MSEC)\n        LB.stop()\n        RB.stop()\n        LF.stop()\n        LR.stop()\n    else:\n        while Gryo.heading(DEGREES) > desired_heading + 3:\n            my_1var_Telemetry_number(Gryo.heading(DEGREES))\n            if Gryo.heading(DEGREES) < desired_heading + 45:\n                LB.set_velocity((Turn_Nonabsolute_turn_angle_speed__speed / 2), PERCENT)\n                RB.set_velocity((Turn_Nonabsolute_turn_angle_speed__speed / 2), PERCENT)\n                LF.set_velocity((Turn_Nonabsolute_turn_angle_speed__speed / 2), PERCENT)\n                LR.set_velocity((Turn_Nonabsolute_turn_angle_speed__speed / 2), PERCENT)\n            RB.spin(FORWARD)\n            LR.spin(FORWARD)\n            LB.spin(REVERSE)\n            LF.spin(REVERSE)\n            wait(5, MSEC)\n        LB.stop()\n        RB.stop()\n        LF.stop()\n        LR.stop()\n    prevheading = desired_heading\n    wait(0.5, SECONDS)\n\ndef Gyro_Telemetry():\n    global myVariable, accelCheck, kill, desired_heading, prevheading, automove, Inputs, velocity, Cords, avgacceleration, message1, GetContAcceleration, vexcode_brain_precision, vexcode_console_precision, vexcode_controller_1_precision\n    brain.screen.clear_screen()\n    brain.screen.set_font(FontType.MONO20)\n    brain.screen.set_cursor(1, 1)\n    brain.screen.print(\"Heading  \")\n    brain.screen.print(Gryo.heading(DEGREES), precision=6 if vexcode_brain_precision is None else vexcode_brain_precision)\n    brain.screen.next_row()\n    brain.screen.print(\"Rotation  \")\n    brain.screen.print(Gryo.rotation(DEGREES), precision=6 if vexcode_brain_precision is None else vexcode_brain_precision)\n    brain.screen.next_row()\n    brain.screen.print(\"Roll  \")\n    brain.screen.print(Gryo.orientation(ROLL, DEGREES), precision=6 if vexcode_brain_precision is None else vexcode_brain_precision)\n    brain.screen.next_row()\n    brain.screen.print(\"X A  \")\n    brain.screen.print(100 * Gryo.acceleration(XAXIS), precision=6 if vexcode_brain_precision is None else vexcode_brain_precision)\n    brain.screen.next_row()\n    brain.screen.print(\"X  \")\n    brain.screen.print(Gryo.gyro_rate(XAXIS, VelocityUnits.DPS), precision=6 if vexcode_brain_precision is None else vexcode_brain_precision)\n    brain.screen.next_row()\n    brain.screen.next_row()\n    brain.screen.print(\"Y A  \")\n    brain.screen.print(100 * Gryo.acceleration(YAXIS), precision=6 if vexcode_brain_precision is None else vexcode_brain_precision)\n    brain.screen.next_row()\n    brain.screen.print(\"Y  \")\n    brain.screen.print(Gryo.gyro_rate(YAXIS, VelocityUnits.DPS), precision=6 if vexcode_brain_precision is None else vexcode_brain_precision)\n    brain.screen.next_row()\n    brain.screen.next_row()\n    brain.screen.print(\"Z A  \")\n    brain.screen.print(100 * Gryo.acceleration(ZAXIS), precision=6 if vexcode_brain_precision is None else vexcode_brain_precision)\n    brain.screen.next_row()\n    brain.screen.print(\"Z  \")\n    brain.screen.print(Gryo.gyro_rate(ZAXIS, VelocityUnits.DPS), precision=6 if vexcode_brain_precision is None else vexcode_brain_precision)\n    brain.screen.next_row()\n\ndef Drive_Forward_degs_degree_speee__25_power(Drive_Forward_degs_degree_speee__25_power__degs, Drive_Forward_degs_degree_speee__25_power__speee):\n    global myVariable, accelCheck, kill, desired_heading, prevheading, automove, Inputs, velocity, Cords, avgacceleration, message1, GetContAcceleration, vexcode_brain_precision, vexcode_console_precision, vexcode_controller_1_precision\n    LB.set_position(0, DEGREES)\n    RB.set_position(0, DEGREES)\n    LF.set_position(0, DEGREES)\n    LR.set_position(0, DEGREES)\n    LB.set_velocity(Drive_Forward_degs_degree_speee__25_power__speee, PERCENT)\n    RB.set_velocity(Drive_Forward_degs_degree_speee__25_power__speee, PERCENT)\n    LF.set_velocity(Drive_Forward_degs_degree_speee__25_power__speee, PERCENT)\n    LR.set_velocity(Drive_Forward_degs_degree_speee__25_power__speee, PERCENT)\n    LB.spin(FORWARD)\n    RB.spin(FORWARD)\n    LF.spin(FORWARD)\n    LR.spin(FORWARD)\n    while not LR.position(DEGREES) > Drive_Forward_degs_degree_speee__25_power__degs:\n        my_1var_Telemetry_number(LR.position(DEGREES))\n        wait(5, MSEC)\n    LB.stop()\n    RB.stop()\n    LF.stop()\n    LR.stop()\n\n\ndef ondriver_drivercontrol_0():\n    global myVariable, accelCheck, kill, desired_heading, prevheading, automove, Inputs, velocity, Cords, avgacceleration, message1, GetContAcceleration, vexcode_brain_precision, vexcode_console_precision, vexcode_controller_1_precision\n    accelCheck = 0\n    myVariable = 0\n    kill = 0\n    LB.stop()\n    RB.stop()\n    LF.stop()\n    LR.stop()\n    LB.set_stopping(BRAKE)\n    RB.set_stopping(BRAKE)\n    LF.set_stopping(BRAKE)\n    LR.set_stopping(BRAKE)\n    LB.set_velocity(100, PERCENT)\n    RB.set_velocity(100, PERCENT)\n    LF.set_velocity(100, PERCENT)\n    LR.set_velocity(100, PERCENT)\n    LB.set_max_torque(100, PERCENT)\n    RB.set_max_torque(100, PERCENT)\n    LF.set_max_torque(100, PERCENT)\n    LR.set_max_torque(100, PERCENT)\n    while True:\n        Get_Input_Values()\n        Update_Motors_to_Inputs()\n        wait(5, MSEC)\n\ndef onauton_autonomous_0():\n    global myVariable, accelCheck, kill, desired_heading, prevheading, automove, Inputs, velocity, Cords, avgacceleration, message1, GetContAcceleration, vexcode_brain_precision, vexcode_console_precision, vexcode_controller_1_precision\n    INIT()\n    prevheading = Gryo.heading(DEGREES)\n    # pickup start ball\n    Drive_Reverse_deg_degrees_sped__25power(-140, 10)\n    # dump both\n    Turn_Nonabsolute_turn_angle_speed(-80, 10)\n    Drive_Forward_degs_degree_speee__25_power(770, 10)\n    # pickup wall ball\n    Drive_Reverse_deg_degrees_sped__25power(-360, 10)\n    Turn_Nonabsolute_turn_angle_speed(15, 10)\n    # dump in side container\n    Drive_Forward_degs_degree_speee__25_power(360, 10)\n    Turn_Nonabsolute_turn_angle_speed(-138, 10)\n    Drive_Forward_degs_degree_speee__25_power(1200, 10)\n    # go yeet center blue\n    Drive_Reverse_deg_degrees_sped__25power(-500, 10)\n    Turn_Nonabsolute_turn_angle_speed(76, 10)\n    Drive_Forward_degs_degree_speee__25_power(970, 10)\n    Turn_Nonabsolute_turn_angle_speed(30, 10)\n    Drive_Forward_degs_degree_speee__25_power(500, 15)\n    Drive_Reverse_deg_degrees_sped__25power(-360, 10)\n    Turn_Nonabsolute_turn_angle_speed(0, 10)\n    Drive_Forward_degs_degree_speee__25_power(500, 15)\n    Drive_Reverse_deg_degrees_sped__25power(-360, 10)\n    Turn_Nonabsolute_turn_angle_speed(0, 10)\n    Drive_Forward_degs_degree_speee__25_power(500, 15)\n    Drive_Reverse_deg_degrees_sped__25power(-360, 10)\n    Turn_Nonabsolute_turn_angle_speed(0, 10)\n    Drive_Forward_degs_degree_speee__25_power(500, 15)\n    my_1var_Telemetry_number(LB.temperature(PERCENT))\n\n# create a function for handling the starting and stopping of all autonomous tasks\ndef vexcode_auton_function():\n    # Start the autonomous control tasks\n    auton_task_0 = Thread( onauton_autonomous_0 )\n    # wait for the driver control period to end\n    while( competition.is_autonomous() and competition.is_enabled() ):\n        # wait 10 milliseconds before checking again\n        wait( 10, MSEC )\n    # Stop the autonomous control tasks\n    auton_task_0.stop()\n\ndef vexcode_driver_function():\n    # Start the driver control tasks\n    driver_control_task_0 = Thread( ondriver_drivercontrol_0 )\n    # wait for the driver control period to end\n    while( competition.is_driver_control() and competition.is_enabled() ):\n        # wait 10 milliseconds before checking again\n        wait( 10, MSEC )\n    # Stop the driver control tasks\n    driver_control_task_0.stop()\n\n# register the competition functions\ncompetition = Competition( vexcode_driver_function, vexcode_auton_function )\n","textLanguage":"python","rconfig":[{"port":[20],"name":"LB","customName":true,"deviceType":"Motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22},{"port":[10],"name":"RB","customName":true,"deviceType":"Motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22},{"port":[19],"name":"LF","customName":true,"deviceType":"Motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22},{"port":[9],"name":"LR","customName":true,"deviceType":"Motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22},{"port":[],"name":"controller_1","customName":false,"deviceType":"Controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"primary"},"triportSourcePort":22},{"port":[14],"name":"Gryo","customName":true,"deviceType":"Inertial","setting":{"id":"partner"},"triportSourcePort":22}],"slot":1,"platform":"V5","sdkVersion":"20210708.10.00.00","appVersion":"2.0.8","fileFormat":"1.0.0","icon":""}